{"version":3,"sources":["components/Header.js","components/Footer.js","components/Loading.js","App.js","serviceWorker.js","index.js","model/index.js","stores/user.js","stores/history.js","stores/image.js","stores/auth.js","stores/index.js"],"names":["Header","styled","header","StyledLink","NavLink","Login","div","ButtonStyle","Button","Component","observer","useStores","UserStore","AuthStore","history","useHistory","useEffect","pullUser","to","activeClassName","exact","currentUser","attributes","username","type","onClick","logout","push","Footer","footer","SpinWrapper","Loading","tip","Home","lazy","History","About","Register","App","fallback","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","AV","init","appId","appKey","serverURL","Auth","password","user","User","setUsername","setPassword","Promise","resolve","reject","signUp","loginedUser","logIn","logOut","current","Uploader","file","filename","item","Object","avFile","File","set","save","serveFile","page","limit","query","Query","include","skip","descending","equalTo","find","results","makeObservable","this","observable","action","newList","list","concat","isLoading","append","length","hasMore","finally","newFilename","newFile","serverFile","warning","values","resetUser","err","HistoryStore","reset","ImageStore","context","createContext","stores","useContext"],"mappings":"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","file":"static/js/main.fe756b80.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\nimport {Button} from 'antd';\nimport {NavLink,useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\nimport {useStores} from \"../stores\";\nimport {observer} from \"mobx-react\";\n\nconst Header = styled.header`\n  display: flex;\n  align-items: center;\n  padding: 10px 100px;\n  background-color: rgb(52,58,64);\n  color: #fff;\n`;\n\n\nconst StyledLink = styled(NavLink)`\n  color: #fff;\n  margin-left: 30px;\n\n  &.active {\n    border-bottom: 1px solid dodgerblue;\n    color:dodgerblue;\n  }\n`;\n\nconst Login = styled.div`\n  margin-left: auto;\n`;\n\n\nconst ButtonStyle = styled(Button)`\n  margin: 0 10px;\n`\n\nconst Component = observer(() => {\n  const {UserStore, AuthStore} = useStores()\n  let history = useHistory();\n  useEffect(()=>{\n    UserStore.pullUser();\n  },[])\n  const handelLogout = () => {\n    AuthStore.logout()\n  }\n  const handelLogin = () => {\n    history.push(\"/login\")\n  }\n  const handelRegister = () => {\n    history.push(\"/register\")\n  }\n  return (\n    <Header>\n      <nav>\n        <StyledLink to=\"/\" activeClassName=\"active\" exact>首页</StyledLink>\n        <StyledLink to=\"/history\" activeClassName=\"active\">上传历史</StyledLink>\n        <StyledLink to=\"/about\" activeClassName=\"active\">关于我</StyledLink>\n      </nav>\n      <Login>\n        {\n          UserStore.currentUser ?\n            <>\n              {UserStore.currentUser.attributes.username}\n              <ButtonStyle type=\"primary\" onClick={handelLogout}>注销</ButtonStyle>\n            </> :\n            <>\n              <ButtonStyle type=\"primary\" onClick={handelLogin}>登录</ButtonStyle>\n              <ButtonStyle type=\"primary\" onClick={handelRegister}>注册</ButtonStyle>\n            </>\n        }\n      </Login>\n\n    </Header>\n  );\n})\n\nexport default Component;","import React from \"react\";\nimport styled from 'styled-components'\n\n\nconst Footer =styled.footer`\n  padding:10px 100px;\n  text-align:center;\n  color:#666;\n  font-size:12px;\n  background: #eee;\n`\n\nfunction Component(){\n  return (\n    <Footer>\n      <div>\n        <span>请勿上传违反中国大陆和香港法律的图片，违者后果自负。</span>\n      </div>\n    </Footer>\n  )\n}\nexport default Component","import React from \"react\";\r\nimport {Spin} from \"antd\";\r\nimport styled from \"styled-components\";\r\nconst SpinWrapper=styled.div`\r\n display: flex;\r\n justify-content: center;\r\n align-items: center;\r\n`\r\nfunction Loading() {\r\n  return (\r\n      <SpinWrapper>\r\n        <Spin tip=\"加载中\"/>\r\n      </SpinWrapper>\r\n  )\r\n}\r\nexport default Loading","import React, { Suspense, lazy } from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Loading from \"./components/Loading\";\nimport {\n  Switch,\n  Route\n} from 'react-router-dom'\n\nconst Home = lazy(() => import('./pages/Home'))\nconst History = lazy(() => import('./pages/History'))\nconst About = lazy(() => import('./pages/About'))\nconst Login = lazy(() => import('./pages/Login'))\nconst Register = lazy(() => import('./pages/Register'))\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <main>\n        <Suspense fallback={<Loading />}>\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/history\" component={History} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/register\" component={Register} />\n          </Switch>\n        </Suspense>\n      </main>\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'antd/dist/antd.css'\nimport * as serviceWorker from './serviceWorker';\nimport {\n  HashRouter as Router\n} from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n      <App />\n    </Router>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n","import AV, {User} from 'leancloud-storage'\r\n\r\nAV.init({\r\n  appId: \"oIAVQHGu3k80ou8msKitpx6k-gzGzoHsz\",\r\n  appKey: \"C2x8avjcpLr2Jyp2F0AuJBg5\",\r\n  serverURL: \"https://oiavqhgu.lc-cn-n1-shared.com\"\r\n});\r\n\r\nconst Auth = {\r\n  register(username, password) {\r\n    let user = new User();\r\n    user.setUsername(username);\r\n    user.setPassword(password);\r\n    return new Promise((resolve, reject) => {\r\n      user.signUp().then(loginedUser => resolve(loginedUser), error => reject(error))\r\n    });\r\n  },\r\n  login(username, password) {\r\n    return new Promise((resolve, reject) => {\r\n      User.logIn(username, password).then(loginedUser => resolve(loginedUser), error => reject(error))\r\n    })\r\n  },\r\n  logout() {\r\n    User.logOut()\r\n  },\r\n  getCurrentUser() {\r\n    return User.current()\r\n  },\r\n}\r\nconst Uploader = {\r\n  add(file, filename) {\r\n    const item = new AV.Object('Image');\r\n    const avFile = new AV.File(filename, file)\r\n    item.set('filename', filename)\r\n    item.set('owner', AV.User.current())\r\n    item.set('url', avFile)\r\n    return new Promise((resolve, reject) => {\r\n      item.save().then(serveFile => resolve(serveFile), error => reject(error))\r\n    })\r\n  },\r\n\r\n  find({page=0, limit=10}) {\r\n    const query = new AV.Query('Image');\r\n    query.include('owner');\r\n    query.limit(limit);\r\n    query.skip(page*limit);\r\n    query.descending('createdAt');\r\n    query.equalTo('owner', AV.User.current());\r\n    return new Promise((resolve, reject) => {\r\n      query.find()\r\n        .then(results => resolve(results))\r\n        .catch(error => reject(error))\r\n    });\r\n  }\r\n}\r\nexport {Auth, Uploader}","import {observable, action, makeObservable} from 'mobx'\r\nimport {Auth} from \"../model\";\r\n\r\nclass UserStore {\r\n  constructor() {\r\n    makeObservable(this)\r\n  }\r\n  @observable currentUser = null\r\n\r\n  @ action pullUser() {\r\n    this.currentUser = Auth.getCurrentUser()\r\n  }\r\n\r\n  @action resetUser() {\r\n    this.currentUser = null\r\n  }\r\n}\r\n\r\nexport default new UserStore();\r\n","import {observable, action, makeObservable} from 'mobx';\r\nimport { Uploader } from '../model';\r\nimport { message } from 'antd';\r\n\r\nclass HistoryStore {\r\n  constructor() {\r\n    makeObservable(this)\r\n  }\r\n  @observable list = [];\r\n  @observable isLoading = false;\r\n  @observable hasMore = true;\r\n  @observable page = 0;\r\n  limit = 10;\r\n\r\n  @action append(newList) {\r\n    this.list = this.list.concat(newList);\r\n  }\r\n\r\n  @action find() {\r\n    this.isLoading = true;\r\n    Uploader.find({page: this.page, limit: this.limit})\r\n      .then(newList => {\r\n        this.append(newList);\r\n        this.page++;\r\n        if(newList.length < this.limit) {\r\n          this.hasMore = false;\r\n        }\r\n      }).catch(error => {\r\n      message.error('加载数据失败');\r\n    }).finally(() => {\r\n      this.isLoading = false;\r\n    });\r\n  }\r\n\r\n  @action reset() {\r\n    this.list = [];\r\n    this.isLoading = false;\r\n    this.hasMore = true;\r\n    this.page = 0;\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default new HistoryStore();\r\n","import {observable, action, makeObservable} from 'mobx'\r\nimport {Uploader} from \"../model\";\r\nimport {message} from \"antd\";\r\n\r\nclass ImageStore {\r\n  constructor() {\r\n    makeObservable(this)\r\n  }\r\n\r\n  @observable filename = \"\"\r\n  @observable file = null\r\n  @observable isLoading = false\r\n  @observable serverFile=null\r\n\r\n  @ action setFilename(newFilename) {\r\n    this.filename = newFilename\r\n  }\r\n\r\n  @action setFile(newFile) {\r\n    this.file = newFile\r\n  }\r\n\r\n  @action upload() {\r\n    this.isLoading = true\r\n    this.serverFile=null\r\n    return new Promise((resolve, reject) => {\r\n      Uploader.add(this.file, this.filename)\r\n        .then(serverFile => {\r\n          this.serverFile=serverFile\r\n          resolve(serverFile)\r\n        }).catch(error => {\r\n        console.error('上传失败')\r\n        message.warning('上传失败')\r\n        reject(error)\r\n      }).finally(() => {\r\n        this.isLoading = false\r\n      })\r\n    })\r\n  }\r\n  @action reset() {\r\n    this.isLoading = false;\r\n    this.serverFile = null;\r\n  }\r\n}\r\n\r\n  export default new ImageStore();\r\n","import {observable, action, makeObservable} from 'mobx'\nimport {Auth} from \"../model\";\nimport UserStore from './user'\nimport {message} from \"antd\";\nimport HistoryStore from './history';\nimport ImageStore from './image';\n\nclass AuthStore {\n  constructor() {\n    makeObservable(this)\n  }\n  @observable values={\n    username:'',\n    password:''\n  };\n  @action setUsername(username){\n  this.values.username=username\n  }\n  @action setPassword(password){\n    this.values.password=password\n  }\n  @action login(){\n    return new Promise((resolve, reject)=>{\n      Auth.login(this.values.username,this.values.password)\n        .then(user=>{\n          UserStore.pullUser()\n          resolve(user)\n        }).catch(error=>{\n        UserStore.resetUser()\n        message.error('登录失败')\n        reject(error)\n      })\n    })\n  }\n  @action register() {\n    return new Promise((resolve, reject) => {\n      Auth.register(this.values.username, this.values.password)\n        .then(user => {\n          UserStore.pullUser()\n          resolve(user);\n        }).catch(err => {\n        UserStore.resetUser()\n        message.error('注册失败')\n        reject(err);\n      })\n    });\n  }\n  @action logout(){\n    Auth.logout()\n    UserStore.resetUser()\n    HistoryStore.reset()\n    ImageStore.reset()\n  }\n}\nexport default new AuthStore();\n","import {createContext, useContext} from \"react\";\nimport AuthStore from \"./auth\";\nimport UserStore from './user'\nimport ImageStore from  './image'\nimport HistoryStore from \"./history\";\n\nconst context = createContext({\n  AuthStore,\n  UserStore,\n  ImageStore,\n  HistoryStore\n})\n  window.stores={\n    AuthStore,\n    UserStore,\n    ImageStore,\n    HistoryStore\n\n  }\nexport const useStores = () => useContext(context)"],"sourceRoot":""}